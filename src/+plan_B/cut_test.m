import plan_B.time_cut
import plan_B.freq_cut

%% Shapes
data = rand(13, 3);
assert(isequal( ...
    size(connect_and_drop(data, "WindowLength", 3)), ...
    size(data) ...
));
assert(isequal( ...
    size(time_cut(data)), ...
    size(data) ...
));
assert(isequal( ...
    size(freq_cut(data, "SamplingRate", length(data))), ...
    size(data) ...
));

%% Ideal signal
data = [zeros(1, 10) ones(1, 5) zeros(1, 10) ones(1, 5) zeros(1, 10)].';
assert(isequal( ...
    connect_and_drop(data, "WindowLength", 5), ...
    data ...
));
assert(isequal( ...
    time_cut(data, "SamplingRate", 1, "DurationEstimated", 5), ...
    data ...
));
assert(isequal( ...
    freq_cut(data, "SamplingRate", length(data), "BandWidthEstimated", 5), ...
    data ...
));

%% Negligible noise
data = [zeros(1, 10) ones(1, 5) zeros(1, 10) ones(1, 5) zeros(1, 10)].';
with_noise = data + 0.1 * ones(size(data));
assert(isequal( ...
    time_cut(with_noise, "SamplingRate", 1, "DurationEstimated", 5), ...
    data ...
));
assert(isequal( ...
    freq_cut(with_noise, "SamplingRate", length(data), "BandWidthEstimated", 5), ...
    data ...
));

%% Alternating signal
data = [zeros(1, 10) ones(1, 5) zeros(1, 10) ones(1, 5) zeros(1, 10)].';
n = length(data) / 2;
assert(round(n) == n);
data = data .* reshape([1 -1].' * ones(1, n), [], 1);

assert(isequal( ...
    data .* time_cut(data, "SamplingRate", 1, "DurationEstimated", 5), ...
    data ...
));
assert(isequal( ...
    data .* freq_cut(data, "SamplingRate", length(data), "BandWidthEstimated", 5), ...
    data ...
));
